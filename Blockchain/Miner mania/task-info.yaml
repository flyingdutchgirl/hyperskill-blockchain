type: edu
custom_name: stage3
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |-
    package blockchain;

    import java.security.MessageDigest;
    import java.util.Objects;

    public class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

        public static boolean startsWithZeros(String str, int howManyZeros) {
            if (howManyZeros == 0) {
                return true;
            }

            if (Objects.isNull(str)
                    || str.length() < howManyZeros
                    || str.length() == 0
                    || howManyZeros < 0) {
                return false;
            }


            return str.substring(0, howManyZeros).matches("0+");
        }

    }
  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.util.ArrayList;

    public class BlockChain {
        private ArrayList<Block> blocks;
        private int previousId;
        private String previousHash;

        public BlockChain(int previousId, String previousHash) {
            this.blocks = new ArrayList<>();
            this.previousId = previousId;
            this.previousHash = previousHash;
        }

        public BlockChain() {
            this(0, "0");
        }


        public Block[] generate(int howMany, int zeros) {
            Block[] arr = new Block[howMany];
            for (int i = 0; i < howMany; i++) {
                Block bl = new Block("", ++previousId, previousHash, zeros);
                previousHash = bl.getMyHash();
                arr[i] = bl;
                blocks.add(bl);
            }

            return arr;
        }


    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.time.LocalTime;
    import java.util.Date;
    import java.util.Random;

    public class Block {

        private String content;
        private int id;
        private int magic;
        private String previousHash;
        private String myHash;
        private long timeStamp;
        private long generationTime;


        public Block(String content, int id, String previousHash, int requiredZeros) {
            this.content = content;
            this.id = id;
            this.previousHash = previousHash;
            this.timeStamp = new Date().getTime();
            generateHash(requiredZeros);
        }


        private void generateHash(int zeros) {
            Random rand = new Random();
            long startTime = System.currentTimeMillis();
            long attempts = 0;

            do {
                attempts++;
                magic = rand.nextInt();
                String info = getHashableContent();
                myHash = StringUtil.applySha256(info);
            } while (!StringUtil.startsWithZeros(this.myHash, zeros));

            //System.out.println("zeros = " + zeros + "  attempts = " + attempts);

            generationTime = System.currentTimeMillis() - startTime;
        }


        public String getHashableContent() {
            return magic + content + id + previousHash + timeStamp;
        }

        @Override
        public String toString() {
            return "Block: " + content + "\nId: " + id
                    + "\nTimestamp: " + timeStamp +
                    "\nMagic number: " + magic +
                    "\nHash of the previous block:\n"
                    + previousHash + "\nHash of the block:\n" + myHash + "\n";
        }

        public String generationTimeString() {
            //assert generationTime != 0;
            int seconds = (int) this.generationTime / 1000;
            return "Block was generating for " + seconds + " seconds\n";
        }

        public String getContent() {
            return content;
        }

        public int getId() {
            return id;
        }

        public String getPreviousHash() {
            return previousHash;
        }

        public String getMyHash() {
            return myHash;
        }

        public long getTimeStamp() {
            return timeStamp;
        }

    }
  learner_created: true
- name: src/miners/Miner.java
  visible: true
  learner_created: true
- name: src/miners/MiningManager.java
  visible: true
  learner_created: true
- name: my_blockchain46c66.txt
  visible: true
  learner_created: true
- name: my_blockchain-28e89.txt
  visible: true
  learner_created: true
- name: my_blockchain-6059f.txt
  visible: true
  learner_created: true
- name: my_blockchain-7bb69.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/273/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/50/stages/273/implement">JetBrains
    Academy</a>
  time: Mon, 31 May 2021 20:41:50 UTC
record: 3
